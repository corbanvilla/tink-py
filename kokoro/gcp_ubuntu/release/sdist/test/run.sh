#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Tests a source distribution located in ${TINK_BASE_DIR}/release..
#
# The behavior of this script can be modified using the following optional env
# variables:
#
# - CONTAINER_IMAGE (unset by default): By default when run locally this script
#   executes tests directly on the host. The CONTAINER_IMAGE variable can be set
#   to execute tests in a custom container image for local testing. E.g.:
#
#   CONTAINER_IMAGE="us-docker.pkg.dev/tink-test-infrastructure/tink-ci-images/linux-tink-py-base:latest" \
#     sh ./kokoro/gcp_ubuntu/release/sdist/test/run.sh
set -euo pipefail

IS_KOKORO="false"
if [[ -n "${KOKORO_ARTIFACTS_DIR:-}" ]]; then
  IS_KOKORO="true"
fi
readonly IS_KOKORO

RUN_COMMAND_ARGS=()
if [[ "${IS_KOKORO}" == "true" ]]; then
  readonly TINK_BASE_DIR="$(echo "${KOKORO_ARTIFACTS_DIR}"/git*)"
  cd "${TINK_BASE_DIR}/tink_py"
  source ./kokoro/testutils/py_test_container_images.sh
  CONTAINER_IMAGE="${TINK_PY_BASE_IMAGE}"
  # Kokoro places artifacts generated by a parent job here.
  readonly SDIST_ARCHIVE="$(echo "${KOKORO_GFILE_DIR}/tink-"*"tar.gz")"
  if [[ ! -f "${SDIST_ARCHIVE}" ]]; then
    echo "FileNotFoundError: Sdist file not found in ${KOKORO_GFILE_DIR}" >&2
    ls -l "${KOKORO_GFILE_DIR}"
    exit 1
  fi
  mkdir "${TINK_BASE_DIR}/tink_py/release"
  cp "${SDIST_ARCHIVE}" "${TINK_BASE_DIR}/tink_py/release"
  RUN_COMMAND_ARGS+=( -k "${TINK_GCR_SERVICE_KEY}" )
fi
readonly CONTAINER_IMAGE

if [[ ! -d release ]]; then
  echo "InvalidArgumentError: No 'release' folder found in $(pwd)" >&2
  exit 1
fi

if [[ -n "${CONTAINER_IMAGE:-}" ]]; then
  RUN_COMMAND_ARGS+=( -c "${CONTAINER_IMAGE}" )
fi
readonly RUN_COMMAND_ARGS

./kokoro/testutils/copy_credentials.sh "testdata" "all"

CACHE_OPTIONS=()
if [[ -n "${TINK_REMOTE_BAZEL_CACHE_GCS_BUCKET:-}" ]]; then
  cp "${TINK_REMOTE_BAZEL_CACHE_SERVICE_KEY}" cache_key
  CACHE_OPTIONS+=( -c "${TINK_REMOTE_BAZEL_CACHE_GCS_BUCKET}/bazel/${TINK_PY_BASE_IMAGE_HASH}" )
fi
readonly CACHE_OPTIONS

cat <<EOF > _do_test_dist.sh
set -euo pipefail

source ./kokoro/testutils/install_vault.sh
source ./kokoro/testutils/run_hcvault_test_server.sh
vault write -f transit/keys/key-1

./tools/distribution/test_dist.sh ${CACHE_OPTIONS[@]} release
EOF
chmod +x _do_test_dist.sh

trap cleanup EXIT

cleanup() {
  rm -rf _do_test_dist.sh
}

./kokoro/testutils/docker_execute.sh "${RUN_COMMAND_ARGS[@]}" ./_do_test_dist.sh
