#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Tests a source distribution located in ${TINK_BASE_DIR}/release..
#
# The behavior of this script can be modified using the following optional env
# variables:
#
# - CONTAINER_IMAGE (unset by default): By default when run locally this script
#   executes tests directly on the host. The CONTAINER_IMAGE variable can be set
#   to execute tests in a custom container image for local testing. E.g.:
#
#   CONTAINER_IMAGE="us-docker.pkg.dev/tink-test-infrastructure/tink-ci-images/linux-tink-py-base:latest" \
#     sh ./kokoro/gcp_ubuntu/release/sdist/test/run.sh
#
# - USE_LOCAL_TINK_CC ("true" by default): If true, the script  uses a local
#   version of tink_cc located at TINK_BASE_DIR (see below).
#   NOTE: tink_cc is fetched from GitHub if not found.
#
# - TINK_BASE_DIR (../ by default): This is the folder where to look for
#   tink-py and its dependencies. That is ${TINK_BASE_DIR}/tink_py and
#   optionally ${TINK_BASE_DIR}/tink_cc.
set -euo pipefail

IS_KOKORO="false"
if [[ -n "${KOKORO_ARTIFACTS_DIR:-}" ]]; then
  IS_KOKORO="true"
fi
readonly IS_KOKORO

if [[ -z "${USE_LOCAL_TINK_CC:-}" ]]; then
  if [[ "${KOKORO_PARENT_JOB_NAME:-}" =~ tink/github/py/.*_release ]]; then
    USE_LOCAL_TINK_CC="false"
  else
    USE_LOCAL_TINK_CC="true"
  fi
fi
readonly USE_LOCAL_TINK_CC

RUN_COMMAND_ARGS=()
if [[ "${IS_KOKORO}" == "true" ]]; then
  TINK_BASE_DIR="$(echo "${KOKORO_ARTIFACTS_DIR}"/git*)"
  source "${TINK_BASE_DIR}/tink_py/kokoro/testutils/py_test_container_images.sh"
  CONTAINER_IMAGE="${TINK_PY_BASE_IMAGE}"

  # Kokoro places artifacts generated by a parent job here.
  readonly SDIST_ARCHIVE="$(echo "${KOKORO_GFILE_DIR}/tink-"*"tar.gz")"
  if [[ ! -f "${SDIST_ARCHIVE}" ]]; then
    echo "FileNotFoundError: Sdist file not found in ${KOKORO_GFILE_DIR}" >&2
    ls -l "${KOKORO_GFILE_DIR}"
    exit 1
  fi
  mkdir "${TINK_BASE_DIR}/tink_py/release"
  cp "${SDIST_ARCHIVE}" "${TINK_BASE_DIR}/tink_py/release"
  RUN_COMMAND_ARGS+=( -k "${TINK_GCR_SERVICE_KEY}" )
else
  TINK_BASE_DIR="$(dirname "$(pwd)")"
fi
readonly TINK_BASE_DIR
readonly CONTAINER_IMAGE

cd "${TINK_BASE_DIR}/tink_py"

if [[ ! -d release ]]; then
  echo "InvalidArgumentError: No 'release' folder found in $(pwd)" >&2
  exit 1
fi

if [[ "${USE_LOCAL_TINK_CC}" == "true" ]]; then
  if [[ -n "${CONTAINER_IMAGE:-}" ]]; then
    RUN_COMMAND_ARGS+=( -c "${CONTAINER_IMAGE}" )
    # Absolute path in the container.
    export TINK_PYTHON_SETUPTOOLS_LOCAL_TINK_CC_PATH="/deps/tink_cc"
    cat <<EOF > env_variables.txt
TINK_PYTHON_SETUPTOOLS_LOCAL_TINK_CC_PATH
EOF
    RUN_COMMAND_ARGS+=( -e env_variables.txt )
  else
    export TINK_PYTHON_SETUPTOOLS_LOCAL_TINK_CC_PATH="${TINK_BASE_DIR}/tink_cc"
  fi
fi
readonly RUN_COMMAND_ARGS

./kokoro/testutils/copy_credentials.sh "testdata" "all"
./kokoro/testutils/run_command.sh "${RUN_COMMAND_ARGS[@]}" \
  ./tools/distribution/test_dist.sh "release"
